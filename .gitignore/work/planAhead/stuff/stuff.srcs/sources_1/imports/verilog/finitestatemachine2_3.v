/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module finitestatemachine2_3 (
    input clk,
    input rst,
    input b_0,
    input b_1,
    input b_2,
    input b_3,
    input b_4,
    input s,
    output reg clock1,
    output reg clock2,
    output reg clock3,
    output reg clock4,
    output reg clock5,
    output reg clock6,
    output reg clock7,
    output reg clock8,
    output reg bloat1,
    output reg bloat2,
    output reg bloat3,
    output reg bloat4,
    output reg bloat5,
    output reg [15:0] io_value,
    output reg out
  );
  
  
  
  reg [4:0] storeRst;
  
  reg [2:0] M_store1_d, M_store1_q = 1'h0;
  
  reg [2:0] M_store2_d, M_store2_q = 1'h0;
  
  reg [2:0] M_store3_d, M_store3_q = 1'h0;
  
  reg [2:0] M_store5_d, M_store5_q = 1'h0;
  
  reg [2:0] M_store4_d, M_store4_q = 1'h0;
  
  reg [2:0] M_correct1_d, M_correct1_q = 1'h0;
  
  reg [2:0] M_correct2_d, M_correct2_q = 1'h0;
  
  reg [2:0] M_correct3_d, M_correct3_q = 1'h0;
  
  reg [2:0] M_correct4_d, M_correct4_q = 1'h0;
  
  reg [2:0] M_correct5_d, M_correct5_q = 1'h0;
  
  reg [4:0] button_array;
  
  reg button;
  
  reg [2:0] M_bloat_d, M_bloat_q = 1'h0;
  
  reg [4:0] bloat_array;
  
  reg [2:0] M_stage_d, M_stage_q = 1'h0;
  
  wire [8-1:0] M_alu_alu;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu8Bit_7 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .alu(M_alu_alu)
  );
  
  reg [1:0] clockrst;
  
  reg [32:0] M_counter_d, M_counter_q = 1'h0;
  
  reg [0:0] M_past_d, M_past_q = 1'h0;
  
  reg [3:0] clock;
  
  reg [7:0] timer30;
  
  reg [0:0] M_timer30bool_d, M_timer30bool_q = 1'h0;
  
  localparam TEST2_state = 5'd0;
  localparam TEST_state = 5'd1;
  localparam B1_state = 5'd2;
  localparam B2_state = 5'd3;
  localparam B3_state = 5'd4;
  localparam B4_state = 5'd5;
  localparam B5_state = 5'd6;
  localparam TIMER_COUNTER_state = 5'd7;
  localparam CMP1_state = 5'd8;
  localparam CMP2_state = 5'd9;
  localparam CMP3_state = 5'd10;
  localparam CMP4_state = 5'd11;
  localparam CMP5_state = 5'd12;
  localparam GUESS_state = 5'd13;
  localparam WRONG_state = 5'd14;
  localparam CORRECT_state = 5'd15;
  localparam S1_1_state = 5'd16;
  localparam S1_0_state = 5'd17;
  localparam S2_1_state = 5'd18;
  localparam S2_0_state = 5'd19;
  localparam S3_1_state = 5'd20;
  localparam S3_0_state = 5'd21;
  localparam RESET_state = 5'd22;
  localparam WON_state = 5'd23;
  localparam LOSE_state = 5'd24;
  
  reg [4:0] M_state_d, M_state_q = WON_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_timer30bool_d = M_timer30bool_q;
    M_counter_d = M_counter_q;
    M_past_d = M_past_q;
    M_stage_d = M_stage_q;
    M_bloat_d = M_bloat_q;
    M_store4_d = M_store4_q;
    M_store3_d = M_store3_q;
    M_store2_d = M_store2_q;
    M_store1_d = M_store1_q;
    M_store5_d = M_store5_q;
    M_correct1_d = M_correct1_q;
    M_correct2_d = M_correct2_q;
    M_correct3_d = M_correct3_q;
    M_correct4_d = M_correct4_q;
    M_correct5_d = M_correct5_q;
    
    M_alu_a = 8'h01;
    M_alu_b = 8'h01;
    M_alu_alufn = 6'h01;
    out = 1'h0;
    clock = M_counter_q[11+3-:4];
    timer30 = M_counter_q[25+7-:8];
    clock1 = timer30[0+0-:1];
    clock2 = timer30[1+0-:1];
    clock3 = timer30[2+0-:1];
    clock4 = timer30[3+0-:1];
    clock5 = timer30[4+0-:1];
    clock6 = timer30[5+0-:1];
    clock7 = timer30[6+0-:1];
    clock8 = timer30[7+0-:1];
    M_counter_d = M_counter_q + 1'h1;
    button_array[0+0-:1] = b_0;
    button_array[1+0-:1] = b_1;
    button_array[2+0-:1] = b_2;
    button_array[3+0-:1] = b_3;
    button_array[4+0-:1] = b_4;
    button = 3'h0;
    storeRst = 5'h00;
    M_correct1_d = 3'h1;
    M_correct2_d = 3'h2;
    M_correct3_d = 3'h3;
    M_correct4_d = 3'h4;
    M_correct5_d = 3'h5;
    bloat_array = 5'h00;
    if (M_bloat_q == 3'h0) begin
      bloat_array = 5'h00;
    end else begin
      if (M_bloat_q == 3'h1) begin
        bloat_array = 5'h01;
      end else begin
        if (M_bloat_q == 3'h2) begin
          bloat_array = 5'h03;
        end else begin
          if (M_bloat_q == 3'h3) begin
            bloat_array = 5'h07;
          end else begin
            if (M_bloat_q == 3'h4) begin
              bloat_array = 5'h0f;
            end else begin
              if (M_bloat_q == 3'h5) begin
                bloat_array = 5'h1f;
              end
            end
          end
        end
      end
    end
    bloat1 = bloat_array[0+0-:1];
    bloat2 = bloat_array[1+0-:1];
    bloat3 = bloat_array[2+0-:1];
    bloat4 = bloat_array[3+0-:1];
    bloat5 = bloat_array[4+0-:1];
    io_value = 16'h0000;
    clockrst = 2'h0;
    if (timer30 > 8'h78) begin
      M_timer30bool_d = 1'h1;
    end
    if (M_stage_q == 3'h2) begin
      M_correct1_d = 3'h5;
      M_correct2_d = 3'h4;
      M_correct3_d = 3'h3;
      M_correct4_d = 3'h2;
      M_correct5_d = 3'h1;
      if (timer30 > 8'h58) begin
        M_timer30bool_d = 1'h1;
      end
    end
    if (M_stage_q == 3'h3) begin
      M_correct1_d = 3'h1;
      M_correct2_d = 3'h2;
      M_correct3_d = 3'h3;
      M_correct4_d = 3'h4;
      M_correct5_d = 3'h5;
      if (timer30 > 8'h3c) begin
        M_timer30bool_d = 1'h1;
      end
    end
    M_state_d = M_state_q;
    
    case (M_state_q)
      WON_state: begin
        M_stage_d = 3'h1;
        io_value = 16'h9987;
        if (button_array == 5'h1e) begin
          M_state_d = RESET_state;
        end
      end
      TIMER_COUNTER_state: begin
        storeRst = 5'h1f;
        if (M_timer30bool_q != 1'h1) begin
          if (button_array == 5'h00) begin
            M_state_d = B1_state;
          end
        end else begin
          M_state_d = LOSE_state;
        end
      end
      B1_state: begin
        io_value = 16'ha1c1;
        if (M_stage_q == 3'h2) begin
          io_value = 16'ha2c1;
        end
        if (M_stage_q == 3'h3) begin
          io_value = 16'ha3c1;
        end
        if (button_array == 5'h01) begin
          M_store1_d = 3'h1;
          io_value = 16'h1000;
        end else begin
          if (button_array == 5'h02) begin
            M_store1_d = 3'h2;
            io_value = 16'h2000;
          end else begin
            if (button_array == 5'h04) begin
              M_store1_d = 3'h3;
              io_value = 16'h3000;
            end else begin
              if (button_array == 5'h08) begin
                M_store1_d = 3'h4;
                io_value = 16'h4000;
              end else begin
                if (button_array == 5'h10) begin
                  M_store1_d = 3'h5;
                  io_value = 16'h5000;
                end else begin
                  if (button_array == 5'h1e) begin
                    M_store1_d = 3'h7;
                    io_value = 16'h6000;
                  end
                end
              end
            end
          end
        end
        
        case (clock)
          4'h8: begin
            if (M_store1_q == 3'h1 && button_array == 5'h00) begin
              M_state_d = B2_state;
            end
            if (M_store1_q == 3'h2 && button_array == 5'h00) begin
              M_state_d = B2_state;
            end
            if (M_store1_q == 3'h3 && button_array == 5'h00) begin
              M_state_d = B2_state;
            end
            if (M_store1_q == 3'h4 && button_array == 5'h00) begin
              M_state_d = B2_state;
            end
            if (M_store1_q == 3'h5 && button_array == 5'h00) begin
              M_state_d = B2_state;
            end
          end
        endcase
        if (M_timer30bool_q == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      B2_state: begin
        io_value = 16'ha1c2;
        if (M_stage_q == 3'h2) begin
          io_value = 16'ha2c2;
        end
        if (M_stage_q == 3'h3) begin
          io_value = 16'ha3c2;
        end
        if (button_array == 5'h01) begin
          M_store2_d = 3'h1;
          io_value = 16'h1000;
        end else begin
          if (button_array == 5'h02) begin
            M_store2_d = 3'h2;
            io_value = 16'h2000;
          end else begin
            if (button_array == 5'h04) begin
              M_store2_d = 3'h3;
              io_value = 16'h3000;
            end else begin
              if (button_array == 5'h08) begin
                M_store2_d = 3'h4;
                io_value = 16'h4000;
              end else begin
                if (button_array == 5'h10) begin
                  M_store2_d = 3'h5;
                  io_value = 16'h5000;
                end else begin
                  if (button_array == 5'h1e) begin
                    M_store2_d = 3'h7;
                    io_value = 16'h6000;
                  end
                end
              end
            end
          end
        end
        
        case (clock)
          4'h9: begin
            if (M_store2_q == 3'h1 && button_array == 5'h00) begin
              M_state_d = B3_state;
            end
            if (M_store2_q == 3'h2 && button_array == 5'h00) begin
              M_state_d = B3_state;
            end
            if (M_store2_q == 3'h3 && button_array == 5'h00) begin
              M_state_d = B3_state;
            end
            if (M_store2_q == 3'h4 && button_array == 5'h00) begin
              M_state_d = B3_state;
            end
            if (M_store2_q == 3'h5 && button_array == 5'h00) begin
              M_state_d = B3_state;
            end
          end
        endcase
        if (M_timer30bool_q == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      B3_state: begin
        io_value = 16'ha1c3;
        if (M_stage_q == 3'h2) begin
          io_value = 16'ha2c3;
        end
        if (M_stage_q == 3'h3) begin
          io_value = 16'ha3c3;
        end
        if (button_array == 5'h01) begin
          M_store3_d = 3'h1;
          io_value = 16'h1000;
        end else begin
          if (button_array == 5'h02) begin
            M_store3_d = 3'h2;
            io_value = 16'h2000;
          end else begin
            if (button_array == 5'h04) begin
              M_store3_d = 3'h3;
              io_value = 16'h3000;
            end else begin
              if (button_array == 5'h08) begin
                M_store3_d = 3'h4;
                io_value = 16'h4000;
              end else begin
                if (button_array == 5'h10) begin
                  M_store3_d = 3'h5;
                  io_value = 16'h5000;
                end else begin
                  if (button_array == 5'h1e) begin
                    M_store3_d = 3'h7;
                    io_value = 16'h6000;
                  end
                end
              end
            end
          end
        end
        
        case (clock)
          4'ha: begin
            if (M_store3_q == 3'h1 && button_array == 5'h00) begin
              M_state_d = B4_state;
            end
            if (M_store3_q == 3'h2 && button_array == 5'h00) begin
              M_state_d = B4_state;
            end
            if (M_store3_q == 3'h3 && button_array == 5'h00) begin
              M_state_d = B4_state;
            end
            if (M_store3_q == 3'h4 && button_array == 5'h00) begin
              M_state_d = B4_state;
            end
            if (M_store3_q == 3'h5 && button_array == 5'h00) begin
              M_state_d = B4_state;
            end
          end
        endcase
        if (M_timer30bool_q == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      B4_state: begin
        io_value = 16'ha1c4;
        if (M_stage_q == 3'h2) begin
          io_value = 16'ha2c4;
        end
        if (M_stage_q == 3'h3) begin
          io_value = 16'ha3c4;
        end
        if (button_array == 5'h01) begin
          M_store4_d = 3'h1;
          io_value = 16'h1000;
        end else begin
          if (button_array == 5'h02) begin
            M_store4_d = 3'h2;
            io_value = 16'h2000;
          end else begin
            if (button_array == 5'h04) begin
              M_store4_d = 3'h3;
              io_value = 16'h3000;
            end else begin
              if (button_array == 5'h08) begin
                M_store4_d = 3'h4;
                io_value = 16'h4000;
              end else begin
                if (button_array == 5'h10) begin
                  M_store4_d = 3'h5;
                  io_value = 16'h5000;
                end else begin
                  if (button_array == 5'h1e) begin
                    M_store4_d = 3'h7;
                    io_value = 16'h6000;
                  end
                end
              end
            end
          end
        end
        
        case (clock)
          4'h9: begin
            if (M_store4_q == 3'h1 && button_array == 5'h00) begin
              M_state_d = B5_state;
            end
            if (M_store4_q == 3'h2 && button_array == 5'h00) begin
              M_state_d = B5_state;
            end
            if (M_store4_q == 3'h3 && button_array == 5'h00) begin
              M_state_d = B5_state;
            end
            if (M_store4_q == 3'h4 && button_array == 5'h00) begin
              M_state_d = B5_state;
            end
            if (M_store4_q == 3'h5 && button_array == 5'h00) begin
              M_state_d = B5_state;
            end
          end
        endcase
        if (M_timer30bool_q == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      B5_state: begin
        io_value = 16'ha1c5;
        if (M_stage_q == 3'h2) begin
          io_value = 16'ha2c5;
        end
        if (M_stage_q == 3'h3) begin
          io_value = 16'ha3c5;
        end
        if (button_array == 5'h01) begin
          M_store5_d = 3'h1;
          io_value = 16'h1000;
        end else begin
          if (button_array == 5'h02) begin
            M_store5_d = 3'h2;
            io_value = 16'h2000;
          end else begin
            if (button_array == 5'h04) begin
              M_store5_d = 3'h3;
              io_value = 16'h3000;
            end else begin
              if (button_array == 5'h08) begin
                M_store5_d = 3'h4;
                io_value = 16'h4000;
              end else begin
                if (button_array == 5'h10) begin
                  M_store5_d = 3'h5;
                  io_value = 16'h5000;
                end else begin
                  if (button_array == 5'h1e) begin
                    M_store5_d = 3'h7;
                    io_value = 16'h6000;
                  end
                end
              end
            end
          end
        end
        
        case (clock)
          4'hb: begin
            if (M_store5_q == 3'h1 && button_array == 5'h00) begin
              M_state_d = CMP1_state;
            end
            if (M_store5_q == 3'h2 && button_array == 5'h00) begin
              M_state_d = CMP1_state;
            end
            if (M_store5_q == 3'h3 && button_array == 5'h00) begin
              M_state_d = CMP1_state;
            end
            if (M_store5_q == 3'h4 && button_array == 5'h00) begin
              M_state_d = CMP1_state;
            end
            if (M_store5_q == 3'h5 && button_array == 5'h00) begin
              M_state_d = CMP1_state;
            end
          end
        endcase
        if (M_timer30bool_q == 1'h1) begin
          M_state_d = LOSE_state;
        end
      end
      CMP1_state: begin
        M_bloat_d = 3'h0;
        M_alu_a = M_bloat_q;
        M_alu_b = 8'h01;
        M_alu_alufn = 6'h00;
        
        case (clock)
          4'h8: begin
            if (M_store1_q == M_correct1_q) begin
              M_state_d = CMP2_state;
            end else begin
              if (M_counter_q[1+0-:1] == 1'h1) begin
                M_bloat_d = M_alu_alu;
                M_state_d = CMP2_state;
              end
            end
          end
        endcase
      end
      CMP2_state: begin
        M_alu_a = M_bloat_q;
        M_alu_b = 8'h01;
        M_alu_alufn = 6'h00;
        
        case (clock)
          4'h8: begin
            if (M_store2_q == M_correct2_q) begin
              M_state_d = CMP3_state;
            end else begin
              if (M_counter_q[1+0-:1] == 1'h1) begin
                M_bloat_d = M_alu_alu;
                M_state_d = CMP3_state;
              end
            end
          end
        endcase
      end
      CMP3_state: begin
        M_alu_a = M_bloat_q;
        M_alu_b = 8'h01;
        M_alu_alufn = 6'h00;
        
        case (clock)
          4'h8: begin
            if (M_store3_q == M_correct3_q) begin
              M_state_d = CMP4_state;
            end else begin
              if (M_counter_q[1+0-:1] == 1'h1) begin
                M_bloat_d = M_alu_alu;
                M_state_d = CMP4_state;
              end
            end
          end
        endcase
      end
      CMP4_state: begin
        M_alu_a = M_bloat_q;
        M_alu_b = 8'h01;
        M_alu_alufn = 6'h00;
        
        case (clock)
          4'h8: begin
            if (M_store4_q == M_correct4_q) begin
              M_state_d = CMP5_state;
            end else begin
              if (M_counter_q[1+0-:1] == 1'h1) begin
                M_bloat_d = M_alu_alu;
                M_state_d = CMP5_state;
              end
            end
          end
        endcase
      end
      CMP5_state: begin
        M_alu_a = M_bloat_q;
        M_alu_b = 8'h01;
        M_alu_alufn = 6'h00;
        
        case (clock)
          4'h8: begin
            if (M_store5_q == M_correct5_q) begin
              M_state_d = GUESS_state;
            end else begin
              if (M_counter_q[1+0-:1] == 1'h1) begin
                M_bloat_d = M_alu_alu;
                M_state_d = GUESS_state;
              end
            end
          end
        endcase
      end
      GUESS_state: begin
        if (clock == 4'h9) begin
          if (M_bloat_q == 3'h0) begin
            M_state_d = CORRECT_state;
          end else begin
            M_state_d = WRONG_state;
          end
        end
      end
      WRONG_state: begin
        io_value = 16'heeee;
        if (button_array == 5'h01) begin
          M_state_d = S1_1_state;
        end
      end
      S1_1_state: begin
        io_value = 16'hc681;
        if (button_array == 5'h01) begin
          M_state_d = S1_0_state;
        end
      end
      S1_0_state: begin
        io_value = 16'hc688;
        if (button_array == 5'h00) begin
          M_state_d = S2_1_state;
        end
      end
      S2_1_state: begin
        io_value = 16'hc681;
        if (button_array == 5'h01) begin
          M_state_d = S2_0_state;
        end
      end
      S2_0_state: begin
        io_value = 16'hc688;
        if (button_array == 5'h00) begin
          M_state_d = S3_1_state;
        end
      end
      S3_1_state: begin
        io_value = 16'hc688;
        if (s == 1'h1) begin
          M_state_d = S3_0_state;
        end
      end
      S3_0_state: begin
        io_value = 16'hc688;
        M_alu_a = M_bloat_q;
        M_alu_b = 8'h01;
        M_alu_alufn = 6'h01;
        
        case (clock)
          4'h8: begin
            if (M_past_q != 1'h1) begin
              if (M_counter_q[1+0-:1] == 1'h1) begin
                M_bloat_d = M_bloat_q - 1'h1;
                M_past_d = 1'h1;
              end
            end
          end
          4'h9: begin
            if (M_past_q == 1'h1) begin
              if (M_bloat_q == 3'h0) begin
                M_past_d = 1'h0;
                M_state_d = TIMER_COUNTER_state;
              end else begin
                M_past_d = 1'h0;
                M_state_d = WRONG_state;
              end
            end
          end
        endcase
      end
      TEST_state: begin
        io_value = 16'hf111;
      end
      TEST2_state: begin
        io_value = 16'hf222;
      end
      CORRECT_state: begin
        clockrst = 2'h3;
        io_value = 16'hd800;
        if (button_array == 5'h01) begin
          M_stage_d = M_stage_q + 1'h1;
          if (M_stage_q == 2'h3) begin
            M_state_d = WON_state;
          end else begin
            M_state_d = TIMER_COUNTER_state;
          end
        end
      end
      RESET_state: begin
        io_value = 16'habcd;
        clockrst = 2'h3;
        M_state_d = TIMER_COUNTER_state;
      end
      LOSE_state: begin
        M_stage_d = 3'h1;
        io_value = 16'h68ab;
        if (button_array == 5'h1e) begin
          M_state_d = RESET_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_correct3_q <= 1'h0;
    end else begin
      M_correct3_q <= M_correct3_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 5'h17;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (storeRst[0+0-:1] == 1'b1) begin
      M_store1_q <= 1'h0;
    end else begin
      M_store1_q <= M_store1_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_stage_q <= 1'h0;
    end else begin
      M_stage_q <= M_stage_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (clockrst[1+0-:1] == 1'b1) begin
      M_timer30bool_q <= 1'h0;
    end else begin
      M_timer30bool_q <= M_timer30bool_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_bloat_q <= 1'h0;
    end else begin
      M_bloat_q <= M_bloat_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_correct5_q <= 1'h0;
    end else begin
      M_correct5_q <= M_correct5_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_correct2_q <= 1'h0;
    end else begin
      M_correct2_q <= M_correct2_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (storeRst[2+0-:1] == 1'b1) begin
      M_store3_q <= 1'h0;
    end else begin
      M_store3_q <= M_store3_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (storeRst[3+0-:1] == 1'b1) begin
      M_store4_q <= 1'h0;
    end else begin
      M_store4_q <= M_store4_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (storeRst[1+0-:1] == 1'b1) begin
      M_store2_q <= 1'h0;
    end else begin
      M_store2_q <= M_store2_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (storeRst[4+0-:1] == 1'b1) begin
      M_store5_q <= 1'h0;
    end else begin
      M_store5_q <= M_store5_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (clockrst[0+0-:1] == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_past_q <= 1'h0;
    end else begin
      M_past_q <= M_past_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_correct4_q <= 1'h0;
    end else begin
      M_correct4_q <= M_correct4_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_correct1_q <= 1'h0;
    end else begin
      M_correct1_q <= M_correct1_d;
    end
  end
  
endmodule
